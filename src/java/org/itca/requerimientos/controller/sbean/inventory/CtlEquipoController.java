package org.itca.requerimientos.controller.sbean.inventory;

import org.itca.requerimientos.model.entities.CtlEquipo;
import org.itca.requerimientos.controller.sbean.util.JsfUtil;
import org.itca.requerimientos.controller.sbean.util.PaginationHelper;
import org.itca.requerimientos.controller.facade.inventory.CtlEquipoFacade;

import java.io.Serializable;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.ResourceBundle;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.itca.requerimientos.model.entities.CtlInventarioDefectuoso;
import org.itca.requerimientos.model.entities.CtlModeloEquipo;
import org.itca.requerimientos.model.entities.CtlProveedor;

@ManagedBean(name = "ctlEquipoController")
@SessionScoped
public class CtlEquipoController implements Serializable {

    private CtlEquipo current;
    private DataModel items = null;
    @EJB
    private org.itca.requerimientos.controller.facade.inventory.CtlEquipoFacade ejbFacade;
    private PaginationHelper pagination;
    private int selectedItemIndex;
    
    private int pageSizeDataModel = 15;
    private int[] paginationSizes = new int[]{5, 10, 15, 20, 25, 30, 50, 100};

    public int getPageSizeDataModel() {
        if (pageSizeDataModel < 5) {
            pageSizeDataModel = 15;
        }
        return pageSizeDataModel;
    }

    public void setPageSizeDataModel(int pageSizeDataModel) {
        this.pageSizeDataModel = pageSizeDataModel;
    }

    public int[] getPaginationSizes() {
        return paginationSizes;
    }

    public void setPaginationSizes(int[] paginationSizes) {
        this.paginationSizes = paginationSizes;
    }
    
    @EJB private org.itca.requerimientos.controller.facade.inventory.CtlInventarioDefectuosoFacade ejbCtlInventarioDefectuosoFacade;

    @EJB private org.itca.requerimientos.controller.facade.security.TUserFacade ejbTUserFacade;

    private CtlInventarioDefectuoso defectiveEquipment;

    public CtlInventarioDefectuoso getDefectiveEquipment() {
        return defectiveEquipment;
    }

    public void setDefectiveEquipment(CtlInventarioDefectuoso defectiveEquipment) {
        this.defectiveEquipment = defectiveEquipment;
    }

    public String addToDefective() {
        current = (CtlEquipo) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        this.defectiveEquipment = new CtlInventarioDefectuoso(current);
        System.out.println("go to form: " + this.defectiveEquipment);
        return "AddToDefective";
    }
    
    public String insertIntoDefective() {
        this.defectiveEquipment.setFechaIngreso(new Date());
        System.out.println("about to persist: " + this.defectiveEquipment);
        this.ejbCtlInventarioDefectuosoFacade.create(this.defectiveEquipment);   // enviar a inventario defectuoso
        JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("InventarioDefectuosoCreated"));
        return createAndView();
    }

    private String dataFilterType;
    private Integer minStock;
    private Integer startStock;
    private Integer endStock;
    private CtlProveedor equipmentProvider;
    private CtlModeloEquipo equipmentModel;
    private Date startDate;
    private Date endDate;

    public String getDataFilterType() {
        return dataFilterType;
    }

    public void setDataFilterType(String dataFilterType) {
        this.dataFilterType = dataFilterType;
    }
    
    //generated by map
    private static Map<String, Object> dataFilterTypeValue;
    static
    {
        dataFilterTypeValue = new LinkedHashMap<String, Object>();
        dataFilterTypeValue.put(" -- seleccione filtro -- ", "NONE"); // label, value
        dataFilterTypeValue.put("Equipos con mínima existencia en inventario", "nonStock");
        dataFilterTypeValue.put("Buscar entre rango de exitencia en inventario", "stockRange");
        dataFilterTypeValue.put("Buscar por proveedor", "findByProvider");
        dataFilterTypeValue.put("Buscar por modelo", "findByModel");
        dataFilterTypeValue.put("Buscar entre rango de fecha de adquisición", "entryRange");
    }
    public Map<String, Object> getDataFilterTypeValue()
    {
        return dataFilterTypeValue;
    }

    public Integer getMinStock() {
        return minStock;
    }

    public void setMinStock(Integer minStock) {
        this.minStock = minStock;
    }

    public Integer getStartStock() {
        return startStock;
    }

    public void setStartStock(Integer startStock) {
        this.startStock = startStock;
    }

    public Integer getEndStock() {
        return endStock;
    }

    public void setEndStock(Integer endStock) {
        this.endStock = endStock;
    }

    public CtlProveedor getEquipmentProvider() {
        return equipmentProvider;
    }

    public void setEquipmentProvider(CtlProveedor equipmentProvider) {
        this.equipmentProvider = equipmentProvider;
    }

    public CtlModeloEquipo getEquipmentModel() {
        return equipmentModel;
    }

    public void setEquipmentModel(CtlModeloEquipo equipmentModel) {
        this.equipmentModel = equipmentModel;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public void applyDataFilterType() {
        System.out.println("dataFilterType is: " + dataFilterType);
        recreateModel();
    }

    public void filterByMinStock() {
        System.out.println("minStock is: " + minStock);
        recreateModel();
    }

    public void filterByStockRange() {
        System.out.println("startStock is: " + startStock + ", endStock is: " + endStock);
        recreateModel();
    }

    public void filterByEquipmentProvider() {
        System.out.println("equipmentProvider is: " + equipmentProvider);
        recreateModel();
    }

    public void filterByEquipmentModel() {
        System.out.println("equipmentModel is: " + equipmentModel);
        recreateModel();
    }

    public void filterByEntryRange() {
        System.out.println(new Date());
        System.out.println("startDate is: " + startDate + ", endDate is: " + endDate);
        recreateModel();
    }

    public CtlEquipoController() {
    }

    public CtlEquipo getSelected() {
        if (current == null) {
            current = new CtlEquipo();
            selectedItemIndex = -1;
        }
        return current;
    }

    private CtlEquipoFacade getFacade() {
        return ejbFacade;
    }

    public PaginationHelper getPagination() {
        if (pagination == null) {
            pagination = new PaginationHelper(getPageSizeDataModel()) {

                @Override
                public int getItemsCount() {
                    return getFacade().count();
                }

                @Override
                public DataModel createPageDataModel() {
                    if ("nonStock".equals(dataFilterType) && minStock != null) {
                        return new ListDataModel(getFacade().nonStock(minStock, new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                    }
                    else if ("stockRange".equals(dataFilterType) && startStock != null && endStock != null) {
                        return new ListDataModel(getFacade().stockRange(startStock, endStock, new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                    }
                    else if ("findByProvider".equals(dataFilterType) && equipmentProvider != null) {
                        return new ListDataModel(getFacade().findByProvider(equipmentProvider.getId(), new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                    }
                    else if ("findByModel".equals(dataFilterType) && equipmentModel != null) {
                        return new ListDataModel(getFacade().findByModel(equipmentModel.getId(), new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                    }
                    else if ("entryRange".equals(dataFilterType) && startDate != null && endDate != null) {
                        return new ListDataModel(getFacade().entryRange(startDate, endDate, new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                    }
                    return new ListDataModel(getFacade().findRange(new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                }
            };
        }
        return pagination;
    }

    public String prepareList() {
        recreatePagination();
        recreateModel();
        return "List";
    }

    public String prepareView() {
        current = (CtlEquipo) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "View";
    }
    
    public String createAndView() {
        if (current == null) {
            recreatePagination();
            recreateModel();
            return "List";
        }
        return "View";
    }

    public String prepareCreate() {
        current = new CtlEquipo();
        selectedItemIndex = -1;
        return "Create";
    }

    public String create() {
        try {
            
            FacesContext context = FacesContext.getCurrentInstance();
            current.setIdUserReg(ejbTUserFacade.findByUsername(context.getExternalContext().getUserPrincipal().getName()));
            current.setFechaAdquisicion(new Date());
            getFacade().create(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("CtlEquipoCreated"));
            // return prepareCreate();
            return createAndView();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String prepareEdit() {
        current = (CtlEquipo) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        return "Edit";
    }

    public String update() {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("CtlEquipoUpdated"));
            return "View";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("PersistenceErrorOccured"));
            return null;
        }
    }

    public String destroy() {
        current = (CtlEquipo) getItems().getRowData();
        selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        performDestroy();
        recreatePagination();
        recreateModel();
        return "List";
    }

    public String destroyAndView() {
        performDestroy();
        recreateModel();
        updateCurrentItem();
        if (selectedItemIndex >= 0) {
            return "View";
        } else {
            // all items were removed - go back to list
            recreatePagination();
            recreateModel();
            return "List";
        }
    }

    private void performDestroy() {
        try {
            getFacade().remove(current);
            JsfUtil.addSuccessMessage(ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("CtlEquipoDeleted"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, ResourceBundle.getBundle("/org/itca/requerimientos/bundles/InventoryBundle").getString("PersistenceErrorOccured"));
        }
    }

    private void updateCurrentItem() {
        int count = getFacade().count();
        if (selectedItemIndex >= count) {
            // selected index cannot be bigger than number of items:
            selectedItemIndex = count - 1;
            // go to previous page if last page disappeared:
            if (pagination.getPageFirstItem() >= count) {
                pagination.previousPage();
            }
        }
        if (selectedItemIndex >= 0) {
            current = getFacade().findRange(new int[]{selectedItemIndex, selectedItemIndex + 1}).get(0);
        }
    }

    public DataModel getItems() {
        if (items == null) {
            items = getPagination().createPageDataModel();
        }
        return items;
    }

    private void recreateModel() {
        items = null;
    }

    private void recreatePagination() {
        pagination = null;
    }
    
    public String recreatePageSize(AjaxBehaviorEvent e) {
        return goToFirstPage();
    }

    public String goToFirstPage() {
        // getPagination().goToFirstPage();
        recreatePagination();
        recreateModel();
        return "List";
    }

    public String next() {
        getPagination().nextPage();
        recreateModel();
        return "List";
    }

    public String previous() {
        getPagination().previousPage();
        recreateModel();
        return "List";
    }

    public String goToLastPage() {
        getPagination().goToLastPage();
        recreateModel();
        return "List";
    }

    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), false);
    }

    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), true);
    }

    @FacesConverter(forClass = CtlEquipo.class)
    public static class CtlEquipoControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            CtlEquipoController controller = (CtlEquipoController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "ctlEquipoController");
            return controller.ejbFacade.find(getKey(value));
        }

        java.lang.Long getKey(String value) {
            java.lang.Long key;
            key = Long.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Long value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof CtlEquipo) {
                CtlEquipo o = (CtlEquipo) object;
                return getStringKey(o.getId());
                // return object.toString();
            } else {
                throw new IllegalArgumentException("object " + object + " is of type " + object.getClass().getName() + "; expected type: " + CtlEquipo.class.getName());
            }
        }

    }

}
